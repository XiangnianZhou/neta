import { assParser, ASSJson, Event, assToText, assToSrt} from "./ass_parser.ts";
import { assertEquals } from './deps.ts';

const assString = Deno.readTextFileSync('./test.ass');


const actual = assParser(assString);

const expectScriptInfo: ASSJson['scriptInfo'] = [
    { descriptor: "", info: "; Script generated by Aegisub", isComment: true },
    { descriptor: "", info: "; http://www.aegisub.org", isComment: true },
    {
        descriptor: "Title",
        info: "Neon Genesis Evangelion - Episode 26 (neutral Spanish)",
        isComment: false,
    },
    { descriptor: "Original Script", info: "RoRo", isComment: false },
    { descriptor: "Script Updated By", info: "version 2.8.01", isComment: false },
    { descriptor: "ScriptType", info: "v4.00+", isComment: false },
    { descriptor: "Collisions", info: "Normal", isComment: false },
    { descriptor: "PlayResY", info: "600", isComment: false },
    { descriptor: "PlayDepth", info: "0", isComment: false },
    { descriptor: "Timer", info: "100,0000", isComment: false },
    { descriptor: "Video Aspect Ratio", info: "0", isComment: false },
    { descriptor: "Video Zoom", info: "6", isComment: false },
    { descriptor: "Video Position", info: "0", isComment: false }
];

Deno.test("assParser: scriptInfo", (): void => {
    assertEquals(actual.scriptInfo, expectScriptInfo);
});

const expectV4Styles: ASSJson['v4Styles'] = {
    format: ["Name", "Fontname", "Fontsize", "PrimaryColour", "SecondaryColour", "OutlineColour", "BackColour", "Bold", "Italic", "Underline", "StrikeOut", "ScaleX", "ScaleY", "Spacing", "Angle", "BorderStyle", "Outline", "Shadow", "Alignment", "MarginL", "MarginR", "MarginV", "Encoding"],
    styles: [{
        Name: "DefaultVCD",
        Fontname: "Arial",
        Fontsize: "28",
        PrimaryColour: "&H00B4FCFC",
        SecondaryColour: "&H00B4FCFC",
        BackColour: "&H80000008",
        Bold: "-1",
        Italic: "0",
        StrikeOut: "0",
        BorderStyle: "1",
        Outline: "1.00",
        Shadow: "2.00",
        Alignment: "2",
        MarginL: "30",
        MarginR: "30",
        MarginV: "30",
        Encoding: "0",
        OutlineColour: "&H00000008",
        Underline: "0",
        ScaleX: "100",
        ScaleY: "100",
        Spacing: "0.00",
        Angle: "0.00"
    }]
}

Deno.test('assParser: V4+? styles', (): void => {
    assertEquals(actual.v4Styles, expectV4Styles);
});

const expectEvents: ASSJson['events'] = {
    format: ["Layer", "Start","End", "Style", "Name", "MarginL", "MarginR", "MarginV", "Effect", "Text"],
    list: [
        {
            Start: "0:00:01.18",
            End: "0:00:06.85",
            Style: "DefaultVCD",
            Name: "NTP",
            MarginL: "0000",
            MarginR: "0000",
            MarginV: "0000",
            Text: {
                raw: "{\\pos(400,570)}Like an Angel with pity on nobody\\NThe second line in subtitle{\\r}",
                data: [
                    {
                        text: 'Like an Angel with pity on nobody\\NThe second line in subtitle',
                        override: '\\pos(400,570)'
                    },
                    {
                        text: '',
                        override: '\\r'
                    }
                ]
            },
            Layer: "0",
            Effect: ""
        },
        {
            Start: "0:05:42.69",
            End: "0:05:46.46",
            Style: "chs",
            Name: "",
            MarginL: "0000",
            MarginR: "0000",
            MarginV: "0000",
            Text: {
             raw: "{\\fn华文楷体}避开弹坑 分成左右两列{\\r}\\N{\\fnCronos Pro Light Subhead\\fs16\\1c&H3CF1F3&}Clear the mortar hole! Right and left!",
             data: [
                 {
                     text: '避开弹坑 分成左右两列',
                     override: '\\fn华文楷体'
                 },
                 {
                     text: '\\N',
                     override: '\\r'
                 },
                 {
                     text: 'Clear the mortar hole! Right and left!',
                     override: '\\fnCronos Pro Light Subhead\\fs16\\1c&H3CF1F3&'
                 }
             ]
            },
            Layer: "0",
            Effect: ""
        },
        {
            descriptor: "OtherDescriptors",
            info: "balabala"
        }
    ]
};

Deno.test('assParser: events', (): void => {
    assertEquals(actual.events.format, expectEvents.format);
    assertEquals(actual.events.list[0], expectEvents.list[0]);
    assertEquals(actual.events.list[1], expectEvents.list[1]);
    assertEquals(actual.events.list[2], expectEvents.list[2]);
});

Deno.test('assParser: other sections', (): void => {
    assertEquals(actual.OtherSections, 'line1\nline2');
});

const expectedSrt = `1
0:00:01.18 --> 0:00:06.85
Like an Angel with pity on nobody
The second line in subtitle

2
0:05:42.69 --> 0:05:46.46
避开弹坑 分成左右两列
Clear the mortar hole! Right and left!`;

Deno.test('convert ass to srt', (): void => {
    const actualSrt = assToSrt(assString)
    assertEquals(actualSrt, expectedSrt);
});

const expectedText = `Like an Angel with pity on nobody
The second line in subtitle
避开弹坑 分成左右两列
Clear the mortar hole! Right and left!`;

Deno.test('convert ass to text', (): void => {
    const actualText = assToText(assString);
    assertEquals(actualText, expectedText);
});
